#!/usr/bin/env python2
# -*- coding: utf-8 -*-
import os, shutil, string
import dicom
from soma import argparse
from soma.dicom import aggregator
import sys, traceback

def createTree( serie ):
    def makeValidValue( value ):
        valid_chars = "-_.%s%s" % (string.ascii_letters, string.digits)
        return ''.join( c for c in value.replace( ' ', '_' ) if c in valid_chars )

    if len( serie ) == 0:
        return

    first = serie[ 0 ]
    try:
        # Get DICOM information to build file tree
        ds = dicom.read_file( first )
        patientName = makeValidValue( ds.PatientsName )
        modality = makeValidValue( ds.Modality )
        seriesDescription = makeValidValue( ds.SeriesDescription )
        seriesInstanceUid = makeValidValue( ds.SeriesInstanceUID )
    except:
        print "Exception in user code:"
        print '-'*60
        traceback.print_exc(file=sys.stdout)
        print '-'*60
        return

    try:
        patientDirName = os.path.join( args.output, \
                                       patientName )
        inc = 1
        if os.path.exists( patientDirName ) and \
           patientDirName not in sessionPatientDirNames:
            inc = 2
            while os.path.exists( patientDirName + "_" + str( inc ) ) and \
                  patientDirName + "_" + str( inc ) not in sessionPatientDirNames:
                inc += 1

        # Create patient directory
        if inc > 1:
            patientDirName += "_" + str( inc )
        sessionPatientDirNames.append( patientDirName )
        os.mkdir( patientDirName )
    except:
        print "Exception in user code:"
        print '-'*60
        traceback.print_exc(file=sys.stdout)
        print '-'*60


    try:
        # Create serie directory
        serieDir = os.path.join( patientDirName, \
                                 modality + "_" + seriesDescription )
        if args.unique:
            serieDir += "_" + seriesInstanceUid
        os.mkdir( serieDir )

        # Copy DICOM files into serie directory
        for f in serie:
            baseDestFile = os.path.join( serieDir, os.path.basename( f ) )
            destFile = baseDestFile
            num = 2
            while os.path.exists( destFile ):
                destFile = baseDestFile + "_" + str( num )
                num += 1
            shutil.copyfile( f, destFile )
        os.chmod(serieDir, 0444)
    except:
        print "Exception in user code:"
        print '-'*60
        traceback.print_exc(file=sys.stdout)
        print '-'*60


if __name__ == '__main__':
    parser = argparse.ArgumentParser( description =
'''
Sort input DICOM files according to the following tree: <PatientsName>/<Modality>_<SeriesDescription>_<SeriesInstanceUID>
''' )

    parser.add_argument( '-i', '--input',  nargs='+', help='input DICOM files/directories')
    parser.add_argument( '-o', '--output', help='output directory' )
    parser.add_argument( '-u', '--unique', help='create unique directory name', action="store_true" )

    args = parser.parse_args()

    if args.input is None or \
       args.output is None:
        parser.parse_args( [ '-h' ] )

    try:
        # Create output directory
        os.mkdir( args.output )
    except:
        pass

    # Aggregate input files
    aggregator = aggregator.DicomAggregator()
    aggregator.add_dicom_sources( args.input )
    aggregator.aggregate()

    sessionPatientDirNames = []

    # Browse aggregated DICOM series
    for serie in aggregator._aggregate_sources.values():
        createTree( serie )
